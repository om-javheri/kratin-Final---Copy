{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om javheri\\\\Desktop\\\\kretin\\\\frontend\\\\src\\\\components\\\\Alzheimer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Text_area from './Text_area';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Alzheimer() {\n  _s();\n  const [todoTasks, setTodoTasks] = useState([]);\n  useEffect(() => {\n    // Fetch tasks from the server when the component mounts\n    fetchTasks();\n  }, []); // Empty dependency array to run the effect only once\n\n  const fetchTasks = () => {\n    fetch(\"http://localhost:8081/GetTasks\").then(res => res.json()).then(data => {\n      setTodoTasks(data); // Update the state with fetched tasks\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  const handleAddTask = task => {\n    // Add the new task to the state\n    setTodoTasks([...todoTasks, task]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Text_area, {\n      heading: \"Today\",\n      text1: \"Add\",\n      text2: \"Edit\",\n      text3: \"Delete\",\n      text4: \"Done\",\n      status: \"today\",\n      results: todoTasks.join('\\n'),\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text_area, {\n      heading: \"Next\",\n      text1: \"Add\",\n      text2: \"Edit\",\n      text3: \"Delete\",\n      text4: \"Today\",\n      status: \"next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text_area, {\n      heading: \"My Diary\",\n      text1: \"Add\",\n      text2: \"Edit\",\n      text3: \"Delete\",\n      status: \"diary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Alzheimer, \"BbhJRPnmRac56HBFpUCSaqYVbUE=\");\n_c = Alzheimer;\nvar _c;\n$RefreshReg$(_c, \"Alzheimer\");","map":{"version":3,"names":["React","useEffect","useState","Text_area","jsxDEV","_jsxDEV","Alzheimer","_s","todoTasks","setTodoTasks","fetchTasks","fetch","then","res","json","data","catch","error","console","handleAddTask","task","children","heading","text1","text2","text3","text4","status","results","join","onAddTask","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/om javheri/Desktop/kretin/frontend/src/components/Alzheimer.js"],"sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport Text_area from './Text_area'\r\n\r\nexport default function Alzheimer() {\r\n  const [todoTasks, setTodoTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch tasks from the server when the component mounts\r\n    fetchTasks();\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  const fetchTasks = () => {\r\n    fetch(\"http://localhost:8081/GetTasks\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTodoTasks(data); // Update the state with fetched tasks\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  const handleAddTask = (task) => {\r\n    // Add the new task to the state\r\n    setTodoTasks([...todoTasks, task]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n<Text_area heading=\"Today\" text1=\"Add\" text2=\"Edit\" text3=\"Delete\" text4=\"Done\" status=\"today\" results={todoTasks.join('\\n')} onAddTask={handleAddTask}/>\r\n\r\n<Text_area heading=\"Next\" text1=\"Add\" text2=\"Edit\" text3=\"Delete\" text4=\"Today\" status=\"next\"/>\r\n<Text_area heading=\"My Diary\" text1=\"Add\" text2=\"Edit\" text3=\"Delete\" status=\"diary\"/>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,SAAS,EAACC,QAAQ,QAAO,OAAO;AAC9C,OAAOC,SAAS,MAAM,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd;IACAS,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACvBC,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdN,YAAY,CAACM,IAAI,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EAED,MAAME,aAAa,GAAIC,IAAI,IAAK;IAC9B;IACAX,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEY,IAAI,CAAC,CAAC;EACpC,CAAC;EAED,oBACEf,OAAA;IAAAgB,QAAA,gBACJhB,OAAA,CAACF,SAAS;MAACmB,OAAO,EAAC,OAAO;MAACC,KAAK,EAAC,KAAK;MAACC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC,QAAQ;MAACC,KAAK,EAAC,MAAM;MAACC,MAAM,EAAC,OAAO;MAACC,OAAO,EAAEpB,SAAS,CAACqB,IAAI,CAAC,IAAI,CAAE;MAACC,SAAS,EAAEX;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEzJ7B,OAAA,CAACF,SAAS;MAACmB,OAAO,EAAC,MAAM;MAACC,KAAK,EAAC,KAAK;MAACC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC,QAAQ;MAACC,KAAK,EAAC,OAAO;MAACC,MAAM,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/F7B,OAAA,CAACF,SAAS;MAACmB,OAAO,EAAC,UAAU;MAACC,KAAK,EAAC,KAAK;MAACC,KAAK,EAAC,MAAM;MAACC,KAAK,EAAC,QAAQ;MAACE,MAAM,EAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAK7E,CAAC;AAEV;AAAC3B,EAAA,CApCuBD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}