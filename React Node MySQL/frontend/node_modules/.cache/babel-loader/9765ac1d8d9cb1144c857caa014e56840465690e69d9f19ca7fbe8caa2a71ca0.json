{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ShowAndId() {\n  // const [studentData, setStudentData] = useState([]);\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [itemsPerPage] = useState(3);\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const response = await fetch('http://localhost:8081/ShowAndId');\n  //       const data = await response.json();\n  //       if (Array.isArray(data)) {\n  //         setStudentData(data);\n  //       } else {\n  //         setStudentData([]);\n  //       }\n  //     } catch (error) {\n  //       console.error('Error:', error);\n  //       setStudentData([]);\n  //     }\n  //   };\n\n  //   fetchData();\n  // }, []);\n\n  // const indexOfLastItem = currentPage * itemsPerPage;\n  // const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  // const currentItems = studentData.slice(indexOfFirstItem, indexOfLastItem);\n\n  // const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  // const navigate = useNavigate();\n  // const [values] = useState({\n  //   id: '', // Assuming you want to edit a student by ID\n  //   // Add other fields if needed\n  // });\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n\n  //   fetch(`http://localhost:8081/Edit2/${values.id}`, {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //       // Add other fields if needed\n  //     }),\n  //   })\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       if (data.message) {\n  //         // setRegisterStatus(data.message);\n  //         navigate('/Edit2');\n  //       } else {\n  //         // setRegisterStatus(\"Concert created\");\n  //         console.log(data);\n  //         navigate('/Edit2');\n  //       }\n  //     })\n  //     .catch((error) => {\n  //       console.error('Error:', error);\n  //     });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c = ShowAndId;\nexport default ShowAndId;\nvar _c;\n$RefreshReg$(_c, \"ShowAndId\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","ShowAndId","_c","$RefreshReg$"],"sources":["C:/Users/om javheri/Desktop/kretin - Copy/frontend/src/components/ShowAndId.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction ShowAndId() {\r\n  // const [studentData, setStudentData] = useState([]);\r\n  // const [currentPage, setCurrentPage] = useState(1);\r\n  // const [itemsPerPage] = useState(3);\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const response = await fetch('http://localhost:8081/ShowAndId');\r\n  //       const data = await response.json();\r\n  //       if (Array.isArray(data)) {\r\n  //         setStudentData(data);\r\n  //       } else {\r\n  //         setStudentData([]);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error('Error:', error);\r\n  //       setStudentData([]);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  // const indexOfLastItem = currentPage * itemsPerPage;\r\n  // const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  // const currentItems = studentData.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  // const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // const navigate = useNavigate();\r\n  // const [values] = useState({\r\n  //   id: '', // Assuming you want to edit a student by ID\r\n  //   // Add other fields if needed\r\n  // });\r\n\r\n  // const handleSubmit = (e) => {\r\n  //   e.preventDefault();\r\n\r\n  //   fetch(`http://localhost:8081/Edit2/${values.id}`, {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //     body: JSON.stringify({\r\n  //       // Add other fields if needed\r\n  //     }),\r\n  //   })\r\n  //     .then((res) => res.json())\r\n  //     .then((data) => {\r\n  //       if (data.message) {\r\n  //         // setRegisterStatus(data.message);\r\n  //         navigate('/Edit2');\r\n  //       } else {\r\n  //         // setRegisterStatus(\"Concert created\");\r\n  //         console.log(data);\r\n  //         navigate('/Edit2');\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error('Error:', error);\r\n  //     });\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {/* <div className='text-center center2'>\r\n        <h5 className='colorw'>Edit Patient's Data</h5>\r\n\r\n        <div>\r\n          <table className='table2'>\r\n            <thead>\r\n              <tr>\r\n                <th>Student ID</th>\r\n                <th>Student Name</th>\r\n                <th>Student Email</th>\r\n                <th>Student Username</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className='tbody'>\r\n              {currentItems.map((student, index) => (\r\n                <tr key={index}>\r\n                  <td>{student.id}</td>\r\n                  <td>{student.name}</td>\r\n                  <td>{student.email}</td>\r\n                  <td>{student.username}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div> */}\r\n\r\n        {/* <div className='pagination'>\r\n          {Array.from({ length: Math.ceil(studentData.length / itemsPerPage) }, (_, i) => (\r\n            <button\r\n              key={i + 1}\r\n              onClick={() => paginate(i + 1)}\r\n              className={`btn ${currentPage === i + 1 ? 'btn-success' : 'btn-warning'}`}\r\n            >\r\n              {i + 1}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n<br/>        <div className='text-center'>\r\n          <div>\r\n            <button type='submit' onClick={handleSubmit} className='btn btn-success'>\r\n              Edit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ShowAndId;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,SAASA,CAAA,EAAG;EACnB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACED,OAAA,CAAAF,SAAA,mBA+CE,CAAC;AAEP;AAACI,EAAA,GAlHQD,SAAS;AAoHlB,eAAeA,SAAS;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}